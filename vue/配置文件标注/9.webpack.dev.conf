### webpack.dev.conf.js定义了开发环境webpack的相关配置

```
var utils = require('./utils')  // 引入小工具模块
var webpack = require('webpack')  //引入webpack模块
var config = require('../config') // 获取config/index.js的默认配置
var merge = require('webpack-merge')  // webpack-merge插件提供合并功能，将多个对象合并创建一个新对象。 
var baseWebpackConfig = require('./webpack.base.conf')  //引入webpack基础配置
var HtmlWebpackPlugin = require('html-webpack-plugin')  // 引入html-webpack-plugin插件，html-webpack-plugin插件可以生成html文件，对于webpack bundles包含了hash值非常有用
var FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')  // 引入friendly-errors-webpack-plugin插件，更好的识别webpack错误并提供更好的开发体验

/*遍历webpack.base.conf.js的entry，将热重载相关代码(代码所在文件路径)添加每一个入口文件里(文件路径),例如
 entry: {
    app: ['./build/dev-client','./src/main.js']
 }
*/
Object.keys(baseWebpackConfig.entry).forEach(function (name) {
  baseWebpackConfig.entry[name] = ['./build/dev-client'].concat(baseWebpackConfig.entry[name])
})

module.exports = merge(baseWebpackConfig, { // 合并webpack基础配置和webpack开发环境配置
  module: {
    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap }) // 加载在.vue文件外定义的样式
  },
  devtool: '#cheap-module-eval-source-map', // 选择增强调试的开发工具，这里使用的是cheap-module-eval-source-map
  plugins: [   // 向编译器添加附加插件
    new webpack.DefinePlugin({  // 引入DefinePlugin插件,该插件的作用是允许创建能在编译时间内的全局常量
      'process.env': config.dev.env
    }),
    new webpack.HotModuleReplacementPlugin(),  // 该插件可以使页面有更新时重绘变更的模块，不会重加载整个页面
    new webpack.NoEmitOnErrorsPlugin(), // 该插件跳过编译时出错的代码并记录，在编译完成后再报错误。使用CLI,通过启用这个插件WebPACK进程遇到错误代码不会退出
    new HtmlWebpackPlugin({ // 将所有webpack bundles集成到一个html页面
      filename: 'index.html',  // 输出的HTML文件名
      template: 'index.html', // 模板文件路径  
      inject: true  // 设置为true或body是将js代码加到<body>元素结束前，设置为head将js代码加到<head>里面，设置为false所有静态资源css和JavaScript都不会注入到模板文件中
    }),
    new FriendlyErrorsPlugin()   // 添加FriendlyErrorsPlugin插件。
  ]
})
```
